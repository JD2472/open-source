#!/bin/bash

# Usage: ./analysis <cleaned_tsv_file>
# Example: ./analysis cleaned_output.tsv

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <cleaned_tsv_file>"
    exit 1
fi

file="$1"

if [ ! -f "$file" ]; then
    echo "File not found: $file"
    exit 1
fi

# 1. Mechanics Frequency
awk -F'\t' 'NR>1 && $13 != "" {
    split($13, mechs, /, /)
    for (i in mechs) count[mechs[i]]++
}
END {
    max = 0
    for (m in count) {
        if (count[m] > max) {
            max = count[m]
            top = m
        }
    }
    print "The most popular game mechanics is", top, "found in", max, "games"
}' "$file"

# 2. Domains Frequency (corrected to column 14)
awk -F'\t' 'NR>1 && $14 != "" {
    split($14, doms, /, /)
    for (i in doms) count[doms[i]]++
}
END {
    max = 0
    for (d in count) {
        if (count[d] > max) {
            max = count[d]
            top = d
        }
    }
    print "The most game domain is", top, "found in", max, "games"
}' "$file"

# 3. Correlation between Year Published and Average Rating
awk -F'\t' '
function pearson(n, x, y,   sum_x, sum_y, sum_xy, sum_x2, sum_y2, i) {
    for (i = 1; i <= n; i++) {
        sum_x += x[i]
        sum_y += y[i]
        sum_xy += x[i] * y[i]
        sum_x2 += x[i]^2
        sum_y2 += y[i]^2
    }
    numerator = (n * sum_xy - sum_x * sum_y)
    denominator = sqrt((n * sum_x2 - sum_x^2) * (n * sum_y2 - sum_y^2))
    return (denominator == 0) ? 0 : numerator / denominator
}

NR > 1 && $3 != "" && $9 != "" {
    year[++n] = $3
    rating[n] = $9
}

END {
    r = pearson(n, year, rating)
    printf("The correlation between the year of publication and the average rating is %.3f\n", r)
}' "$file"

# 4. Correlation between Complexity and Average Rating
awk -F'\t' '
function pearson(n, x, y,   sum_x, sum_y, sum_xy, sum_x2, sum_y2, i) {
    for (i = 1; i <= n; i++) {
        sum_x += x[i]
        sum_y += y[i]
        sum_xy += x[i] * y[i]
        sum_x2 += x[i]^2
        sum_y2 += y[i]^2
    }
    numerator = (n * sum_xy - sum_x * sum_y)
    denominator = sqrt((n * sum_x2 - sum_x^2) * (n * sum_y2 - sum_y^2))
    return (denominator == 0) ? 0 : numerator / denominator
}

NR > 1 && $11 != "" && $9 != "" {
    complexity[++n] = $11
    rating[n] = $9
}

END {
    r = pearson(n, complexity, rating)
    printf("The correlation between the complexity of a game and its average rating is %.3f\n", r)
}' "$file"
